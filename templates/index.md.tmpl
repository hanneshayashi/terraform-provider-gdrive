---
layout: ""
page_title: "Provider: Google Drive"
description: ](-
  The Google Drive provider can manage Google Drive files / folders, Shared Drives, Labels and permissions
---

# Google Drive provider

## Upgrade from 0.x
Please see the [Upgrade Guide](https://registry.terraform.io/providers/hanneshayashi/gdrive/latest/docs/guides/version_1_upgrade) and make sure you have a backup of your state file before upgrading.

## Setup
First, you need a GCP Service Account with [Domain Wide Delegation](https://support.google.com/a/answer/162106) set up with the Google Drive scope.

This provider uses [GSM](https://github.com/hanneshayashi/gsm) for authentication and API access.
You can take a look at the GSM [Setup Guide](https://gsm.hayashi-ke.online/setup), if you need help.

The basic steps are:
1. Create GCP Project (or use an existing one)
2. Enable the following APIs:
    * Drive API
    * Drive Labels API
    * Cloud Identity API
3. Create a Service Account + Enable Domain Wide Delegation
    * See [Perform Google Workspace Domain-Wide Delegation of Authority](https://developers.google.com/admin-sdk/directory/v1/guides/delegation)
    * **You *don't* need the Service Account Key if you want to use [Application Default Credential](https://cloud.google.com/iam/docs/best-practices-for-using-and-managing-service-accounts#use-attached-service-accounts)**
4. Enter the Client ID of the Service Account with the following scopes in your Admin Console:
    *	`https://www.googleapis.com/auth/drive`
    *	`https://www.googleapis.com/auth/drive.labels`
    *	`https://www.googleapis.com/auth/drive.admin.labels`
    * `https://www.googleapis.com/auth/cloud-identity.orgunits`

You can authenticate in one of two ways:
1. Use Application Default Credentials (**recommended**):
  Activate the [IAM Service Account Credentials API](https://console.developers.google.com/apis/api/iamcredentials.googleapis.com/overview) *in the project where the Service Account is located*

   a) Use a Google Compute Engine instance or [any service that supports attaching a Service Account in GCP](https://cloud.google.com/iam/docs/impersonating-service-accounts#attaching-new-resource)

   **or**

   b) Use `gcloud auth application-default login --impersonate-service-account` on your local workstation

In **both** cases, the account needs the *[Service Account Token Creator](https://cloud.google.com/iam/docs/service-accounts#token-creator-role)* role for the Service Account you set up for DWD (**even if your GCP service is using the same account**).

You can then configure the provider like so:

```terraform
provider "gdrive" {
  service_account     = "email@my-project.iam.gserviceaccount.com"  # This is the email address of your Service Account. You can leave this empty on GCP, if you want to use the service's account
  subject             = "admin@example.com"                         # This is the user you want to impersonate with Domain Wide Delegation
}
```

2. Create a Service Account Key and configure the provider like so:
```terraform
provider "gdrive" {
  service_account_key = "/path/to/sa.json"  # This is the path to your Service Account Key file or its content in JSON format
  subject             = "admin@example.com" # This is the user you want to impersonate with Domain Wide Delegation
}
```

You can also set the `SERVICE_ACCOUNT_KEY` environment variable to store either the path to the Key file or the JSON contents directly.

## Example Usage

{{tffile "examples/provider/provider.tf"}}

{{ .SchemaMarkdown | trimspace }}
